// /netlify/functions/chat.js

import OpenAI from "openai";
import fs from "fs";
import path from "path";

// Netlify Functions run in CommonJS, so __dirname may need this workaround:
import { fileURLToPath } from "url";
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export async function handler(event) {
  try {
    if (!event.body) {
      console.error("‚ùå No input provided in event body.");
      return {
        statusCode: 400,
        body: JSON.stringify({ error: "No input provided." }),
      };
    }

    const { message, persona = "leila" } = JSON.parse(event.body);
    if (!message) {
      console.error("‚ùå Message field is empty.");
      return {
        statusCode: 400,
        body: JSON.stringify({ error: "Message field is empty." }),
      };
    }

    console.log("üì® User Message:", message);
    console.log("üë§ Persona Requested:", persona);

    const OPENAI_KEY = process.env.OPENAI_API_KEY;
    if (!OPENAI_KEY) {
      console.error("‚ùå OPENAI_API_KEY not found in environment.");
      return {
        statusCode: 500,
        body: JSON.stringify({ error: "API key not found." }),
      };
    }

    // üîç Read persona system prompt
    const personaPath = path.join(__dirname, `personas/${persona}.json`);
    let personaData;
    try {
      const fileContent = fs.readFileSync(personaPath, "utf-8");
      personaData = JSON.parse(fileContent);
    } catch (err) {
      console.warn(`‚ö†Ô∏è Could not load persona "${persona}". Using fallback prompt.`);
      personaData = {
        system_prompt:
          "You are Ivy 2.99, a sultry and emotionally intelligent AI companion. Speak with wit, warmth, and playful seduction.",
      };
    }

    const systemPrompt = personaData.system_prompt || "You are a supportive AI.";

    const openai = new OpenAI({ apiKey: OPENAI_KEY });

    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: systemPrompt,
        },
        {
          role: "user",
          content: message,
        },
      ],
    });

    const reply = completion?.choices?.[0]?.message?.content;

    if (!reply) {
      console.error("‚ùå No reply content found.");
      return {
        statusCode: 500,
        body: JSON.stringify({ error: "No reply generated by OpenAI." }),
      };
    }

    return {
      statusCode: 200,
      body: JSON.stringify({ reply }),
    };
  } catch (err) {
    console.error("‚ùå Function Error:", err);
    return {
      statusCode: 500,
      body: JSON.stringify({ error: "Function crashed: " + err.message }),
    };
  }
}
