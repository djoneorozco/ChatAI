const { Configuration, OpenAIApi } = require("openai");

exports.handler = async function (event) {
  try {
    // üîç DEBUG 1: Check if the event body exists
    if (!event.body) {
      console.error("‚ùå No input provided in event body.");
      return {
        statusCode: 400,
        body: JSON.stringify({ error: "No input provided." }),
      };
    }

    const { message } = JSON.parse(event.body);
    if (!message) {
      console.error("‚ùå Message field is empty.");
      return {
        statusCode: 400,
        body: JSON.stringify({ error: "Message field is empty." }),
      };
    }

    const OPENAI_KEY = process.env.OPENAI_API_KEY;
    if (!OPENAI_KEY) {
      console.error("‚ùå OPENAI_API_KEY not found in environment.");
      return {
        statusCode: 500,
        body: JSON.stringify({ error: "API key not found." }),
      };
    }

    console.log("‚úÖ OPENAI_API_KEY is set. Length:", OPENAI_KEY.length);

    const configuration = new Configuration({
      apiKey: OPENAI_KEY,
    });
    const openai = new OpenAIApi(configuration);

    console.log("üì® User Message:", message);

    const completion = await openai.createChatCompletion({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content:
            "You are Ivy 2.99, a sultry and emotionally intelligent AI companion. Speak with wit, warmth, and playful seduction.",
        },
        {
          role: "user",
          content: message,
        },
      ],
    });

    // üîç DEBUG 2.5: Log full completion response
    console.log("üß† OpenAI Full Response:", JSON.stringify(completion.data, null, 2));

    const reply = completion?.data?.choices?.[0]?.message?.content;

    if (!reply) {
      console.error("‚ùå No reply content found in completion response.");
      return {
        statusCode: 500,
        body: JSON.stringify({ error: "No reply generated by OpenAI." }),
      };
    }

    return {
      statusCode: 200,
      body: JSON.stringify({ reply }),
    };
  } catch (err) {
    console.error("‚ùå Function Error:", err);
    return {
      statusCode: 500,
      body: JSON.stringify({ error: "Function crashed: " + err.message }),
    };
  }
};
