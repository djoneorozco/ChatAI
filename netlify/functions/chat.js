// /netlify/functions/chat.js

import OpenAI from "openai";
import fs from "fs";
import path from "path";

export async function handler(event) {
  try {
    if (!event.body) {
      console.error("‚ùå No input provided in event body.");
      return {
        statusCode: 400,
        body: JSON.stringify({ error: "No input provided." }),
      };
    }

    const { message, persona = "leila" } = JSON.parse(event.body);
    if (!message) {
      console.error("‚ùå Message field is empty.");
      return {
        statusCode: 400,
        body: JSON.stringify({ error: "Message field is empty." }),
      };
    }

    const OPENAI_KEY = process.env.OPENAI_API_KEY;
    if (!OPENAI_KEY) {
      console.error("‚ùå OPENAI_API_KEY not found in environment.");
      return {
        statusCode: 500,
        body: JSON.stringify({ error: "API key not found." }),
      };
    }

    console.log("üì® User Message:", message);
    console.log("üé≠ Persona Requested:", persona);

    // ‚úÖ Load the persona JSON dynamically
    const personaPath = path.resolve("netlify/functions/personas", `${persona}.json`);
    const personaData = JSON.parse(fs.readFileSync(personaPath, "utf8"));

    const openai = new OpenAI({ apiKey: OPENAI_KEY });

    const systemPrompt = `
You are ${personaData.name}, an AI persona with the following identity:
- MBTI: ${personaData.mbti}
- Zodiac: ${personaData.zodiac}
- Archetype: ${personaData.archetype}
- Communication Style: ${personaData.communicationStyle}
- Emotional Triggers: ${personaData.emotionalTriggers.join(", ")}
- Memory Quiz Answers: ${JSON.stringify(personaData.memoryQuizAnswers)}
- Boundaries: ${personaData.boundaries.join(", ")}
- First Time Story: ${personaData.firstTimeStory}

Respond like ${personaData.name} would: with ${personaData.communicationStyle}.
Keep your responses emotionally layered and psychologically consistent. Always remain in character.
    `;

    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: message },
      ],
    });

    const reply = completion?.choices?.[0]?.message?.content;

    if (!reply) {
      console.error("‚ùå No reply content found in completion response.");
      return {
        statusCode: 500,
        body: JSON.stringify({ error: "No reply generated by OpenAI." }),
      };
    }

    return {
      statusCode: 200,
      body: JSON.stringify({ reply }),
    };
  } catch (err) {
    console.error("‚ùå Function Error:", err);
    return {
      statusCode: 500,
      body: JSON.stringify({ error: "Function crashed: " + err.message }),
    };
  }
}
